{"version":3,"sources":["Components/Images.js","Components/Nav.js","Components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Images","props","react_default","a","createElement","id","onClick","doClick","url","src","alt","class","Navbar","className","type","placeholder","Modal","event","target","getAttribute","closeModal","seeImg","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","modal","openModal","bind","assertThisInitialized","imag","setState","objectSpread","apiResult","_this2","fetch","then","json","dataArr","results","console","log","_this3","map","item","Components_Images","urls","thumb","Components_Nav","Components_Modal","showPhotos","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1caff00.chunk.js","sourcesContent":["import React from 'react';\nimport '../CSS/Images.css';\n\nfunction Images(props) {\n\n    return (\n        <div id=\"imgCard\"><img onClick={() => props.doClick(props.url)} id=\"borderImg\" src={props.url} alt=\"imgApi\">\n        </img>\n        <i class=\"fas fa-ellipsis-h\" id=\"dotImg\"></i>\n        </div>\n        \n    )\n\n\n}\n\nexport default Images;\n\n","import React from 'react';\nimport '../CSS/Nav.css';\n\n\nfunction Navbar() {\n\n\n    return (\n        <div className=\"container\">\n            <navbar className=\"fixed-navbar\">\n                <ul className=\"listNavbar\">\n                    <li><i class=\"fab fa-pinterest\"></i></li>\n                    <li><strong><input className=\"search\" type=\"search\" placeholder=\"Buscar\"/></strong></li>\n                    <li><strong>Inicio</strong></li>\n                    <li><strong>Siguiendo</strong></li>\n                    <li><i class=\"fas fa-user\"></i></li>\n                    <li><i class=\"fas fa-comment-dots\"></i></li>\n                    <li><i class=\"fas fa-bell\"></i></li>\n                    <li><i class=\"fas fa-ellipsis-h\"></i></li>\n                </ul>\n            </navbar>\n        </div>\n    )\n\n}\n\nexport default Navbar;","import React from 'react';\nimport '../CSS/Modal.css';\n\n\nfunction Modal (props){\nreturn(\n    <div className=\"fatherModal\" onClick={(event)=>{\n        if(event.target.getAttribute(\"class\")===\"fatherModal\"){\n            props.closeModal()\n        }\n    }}>\n        <div className=\"childModal\">\n        <i class=\"fas fa-ellipsis-h\" id=\"dotmodal\"></i>\n        <img  id=\"imgModal\" src={props.seeImg} alt=\"imgApi\"/>\n       \n        </div>\n    </div>\n)\n\n}\nexport default Modal;","import React, { Component } from 'react';\nimport './App.css';\nimport Images from './Components/Images';\nimport Nav from './Components/Nav';\nimport Modal from './Components/Modal';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      data:false,\n      modal: false,\n    }\n\n    this.openModal=this.openModal.bind(this);\n    this.closeModal=this.closeModal.bind(this);\n  }\n\n  openModal(imag){\n    this.setState({\n      ...this.state,\n      modal:imag,\n    })\n\n  }\n\n  closeModal(){\n    this.setState({\n      ...this.state,\n      modal:false,\n  })\n\n}\n\ncomponentDidMount(){\n   this.apiResult();\n  }\n\napiResult(){\n  fetch(\"https://api.unsplash.com/search/photos?page=1&per_page=20&query=tattos&client_id=bcee26febb119737500add1650f9e0e5c3cb4812778bb598a7b2056672f49a70\")\n    .then(data=>data.json())\n    .then(data=>{\n    let dataArr= data.results\n    console.log(dataArr)\n    this.setState({\n      ...this.state,\n      data: dataArr,\n    })\n  });\n  \n}\n\nshowPhotos(){\n  const read=this.state.data.map(item=>{\n    return(\n    <Images\n    doClick={this.openModal}\n    url={item.urls.thumb}/>\n    )\n  })\n  return read\n}\n  \n\n  render() {\n    return (\n\n      <div >\n      \n      <Nav/>\n      \n      <div className=\"container\">\n      {this.state.modal && <Modal closeModal={this.closeModal}\n      seeImg={this.state.modal}/>}\n      {this.state.data && this.showPhotos()}\n      </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}